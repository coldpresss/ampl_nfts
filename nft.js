  /*
  const owner = beyondHelpers.get('owner', '0x0000000000000000000000000000000000000000');
  (async () => {
    const nft = await beyondHelpers.getMetadata();
    const nftAttributes = nft.properties;
  })();
  */

  /*
    ########################################
    #             Mini doc                 #
    ########################################

    This is where lies the JavaScript.
    Everywhere:
    You can access the tokenURI and the Metadata of the JSON directly from the code

    On BeyondNFT:
    We also pass information like "owner" and "viewer" to the NFT
    And Factories properties when the NFT is from a factory (seed, and editable properties)

    A simple helper is added to the code to help you get access to those data.

    beyondHelpers.getMetadata(): returns a promise and fetches the NFT's json containing all Metadata
    beyondHelpers.get('owner'): return the current NFT owner address (if unknown it will be 0x0000000...)

    For factories:
    - beyondHelpers.get('seed')
    - beyondHelpers.get('propertyName')

    So you can do things like:
    (async () => {
      const nft = await beyondHelpers.getMetadata();

      // access the name of the NFT
      const name = nft.name;

      // access the image of the NFT
      const image = nft.image;

      // access the properties of the NFT
      const nftAttributes = nft.properties;
    })();

    ########################################
    #             Factories                #
    ########################################

    If you are developing a factory, you will be able to access the factory data (properties or seed)
    using the getter: beyondHelpers.get(propertyName: string) : string

    examples:

    // with a seed
    const seed = beyondHelpers.get('seed');

    // with editable properties
    const nft = window.context.nft_json;
    const background = beyondHelpers.get('background');
    const speed = beyondHelpers.get('speed');
    const range = beyondHelpers.get('range');

    ########################################
    #               Assets                 #
    ########################################

    If you are using images, videos, audio, please consider uploading those assets
    to IPFS and pin it before referencing it in your code (e.g using https://pinata.cloud)

    ########################################
    #             /!\ Warning             #
    ########################################

    To protect viewers, insecure operation like access to cookies, localStorage, eval, alert or to plugins are not possible.
    This might change in the future with a Permission system.

    ########################################
    #                 p5js                 #
    ########################################

    Be aware that if you add p5.js as a dependency, you MUST use the minified version,
    the non minified version tries to access cookies and will create an error / not render.

    ########################################
    #              Have fun!               #
    ########################################

    Please be responsible, enjoy the coding and feel free to come ask anything on Discord: "http://chat.beyondnft.io"
  */

// supplyHistory exported from https://www.ampleforth.org/dashboard/supply
// supplyHistory.length === 785
const supplyHistory = [50000000,50000000,51321143.18170629,52902733.351417825,54207908.799396284,55055007.839850254,55949273.03613233,56741192.30386374,57384944.27069616,57873027.267500594,58377925.397317685,58906642.01260629,59606836.76310747,60534749.30168666,61622902.209501125,62630942.61831176,63712681.232246205,64889609.23850809,65902750.65307647,66839516.961113885,67925938.73847193,68841318.2411626,69502759.79735397,70153213.00569792,70740129.69514519,71268263.44465357,71740867.23382668,72205487.95322293,72553469.92404918,72824032.7338157,72980856.56461771,72980856.56461771,72980856.56461771,72668448.13592798,72098084.35133429,71668093.05617642,71292028.92607886,70986802.97800271,70986802.97800271,70986802.97800271,70832213.22311248,70526586.3447813,70088708.51627189,69644238.09372543,69192547.82340443,68730760.9030113,68214556.73598883,67588240.67362274,66906004.12235926,66237433.89055258,65562540.694309995,64884292.74956094,64200471.46425716,63536871.44137701,62858781.87389538,62151856.77692063,61363877.99558594,60565385.95786589,59769888.913919255,58970815.62000324,58155028.22780031,57320856.131112345,56423377.91888924,55504734.5521671,54571475.08940478,53634352.14362324,52694693.35381075,51748070.613337256,50798654.92771966,49895135.92161029,49043401.98919065,48160516.24453338,47309506.53753357,46483325.78993515,45676319.32397471,44858614.991497494,43992080.38816119,43108278.919107735,42242059.55901898,41390511.87951501,40546924.72988177,39731063.56400825,38936766.840298586,38207562.60626313,37537348.96946224,36870098.65918113,36183621.34820294,35506600.21690946,34792330.58984634,34074362.952898934,33370341.063880082,32682057.58412025,32007195.061516978,31344824.468658388,30692597.287029117,30056230.06672795,29429237.75656578,28807824.5655099,28199362.563116126,27606095.002581384,27038390.289984137,26532959.69304389,26020273.84227392,25575673.63908006,25153333.361303,24807469.56644151,24496972.557289377,24120864.330024287,23750853.88927257,23357291.807949178,22962935.291979097,22569074.199232638,22199570.67645985,21773431.53954647,21341949.80130954,20913467.961902495,20500617.38505908,20096324.816445783,19701629.753486928,19311310.289592344,18924928.440710858,18525609.41425822,18123427.662957992,17710474.02619362,16538752.424513916,15402747.419153396,14359667.630526358,13414725.60117742,12809616.97952372,12438167.885557683,11957976.866010614,11327232.297777973,10874778.614272337,10441487.089135442,9989019.570421739,9554142.764383089,9161495.834672483,8809828.831604704,8571300.262416052,8314906.515084592,8038903.5262368955,7816260.080207737,7816260.080207737,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7906497.913976017,7952997.674230542,8031380.416718796,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8095372.609332051,8137763.813129793,8183257.509394361,8235945.254669362,8235945.254669362,8235945.254669362,8283632.443185095,8336471.2748894775,8406735.778411105,8406735.778411105,8479547.082079388,8599825.843858516,8758420.943486016,8961103.979321746,9178632.58244359,9326102.359790657,9454625.32893022,9631120.207252426,9806370.458371926,9956180.375231648,10158143.374807531,10459815.389567325,10991656.331710592,11606800.443171779,12206769.501038391,12799487.990507022,13244592.961864883,13480262.325714588,13656514.912435634,13656514.912435634,13419461.159106087,12879810.668677876,12324176.2704971,11761991.841504578,11175491.453655122,10631720.392699748,10115664.354273494,9705320.976847839,9384733.786143571,9074988.900566973,8766561.302712575,8628906.46757682,8732206.137572993,8846089.072149973,9055391.556241708,9318124.600079345,9532579.508353697,9607242.751417732,9683579.601199599,9785590.927483024,9971080.333575686,10217840.312097028,10388307.648678951,10596760.60472982,10840399.663216269,11085213.599351473,11307997.216407115,11515045.784911202,11676874.327299582,11797680.92987972,11797680.92987972,11868989.531985974,11868989.531985974,11942059.906430854,12015635.419621574,12147111.59897318,12316855.789262109,12484307.812968785,12689061.184123859,12894459.375947872,13104014.785391934,13451471.55828753,13851662.87794592,14140109.67993868,14487220.432600744,14961501.768993314,15518362.807714414,16148116.919824056,16928024.939602897,17446104.377284378,17912721.653502285,18475980.288610473,18857121.847572327,19058972.571184184,19311665.602164023,19563791.44567883,19803324.619169243,19952422.05591446,19787740.31182477,19479187.256379057,19252065.02476625,19013247.457422227,18816471.176435318,18628076.364203822,18490872.958827082,18490872.958827082,18614803.54033077,18843063.869636834,19144291.735719938,19448124.790939264,19688136.474757787,19946433.52427404,20080595.56790642,20080595.56790642,20080595.56790642,19939579.000250645,19806689.015537746,19806689.015537746,19806689.015537746,19806689.015537746,19806689.015537746,19806689.015537746,19806689.015537746,19806689.015537746,19693112.919929504,19693112.919929504,19693112.919929504,19594469.797458854,19443400.250740234,19271281.60080782,19072666.396763258,18902405.24258258,18755988.116523426,18593628.348513395,18466221.58723178,18325463.249802917,18325463.249802917,18325463.249802917,18325463.249802917,18325463.249802917,18325463.249802917,18325463.249802917,18325463.249802917,18325463.249802917,18495672.97895282,18756048.45735374,18978525.33431203,19489908.52979332,20100027.5398847,21405886.3717262,23470738.17017333,27056776.0882304,30576974.46032993,33283371.195164427,36887872.856102146,40861121.33607176,44524726.92516358,48423408.34594073,53646902.15924034,62017170.79713899,74047748.83773227,89839888.94993034,114267479.71160601,130739374.37936191,139076241.299642,148117119.1406353,161759834.76100707,186313799.90381107,213932214.21016422,247330869.08467647,292257045.8898692,340981448.3229017,390475726.3515056,424355357.7046404,467297441.1106614,531721351.58324105,616895290.6759578,696691380.3295326,751490791.2609535,780675794.424801,764417855.682838,750553646.5821282,766632269.7673696,779024480.6663343,779024480.6663343,766813832.6938213,754786399.7016033,736265907.1032616,715863004.7271421,690388717.1583421,668314534.0020489,653077336.6694298,631828952.5212775,623909960.2229817,609018581.9552007,590182769.941362,570190523.2285367,548491680.9921196,525781353.5127146,504429028.8644108,484626779.5234222,466058632.9407719,454757724.0740807,442156224.55901706,432161570.25427526,421210178.7894725,406581906.9897479,392206740.2652958,377653187.41747916,367908846.51244605,367908846.51244605,389091778.7643483,423059696.11964643,474934157.6896249,495433838.9672327,495433838.9672327,483430165.5766256,469488628.44977885,453579843.8044041,440653984.2067226,426100020.1553577,415239739.60682327,415239739.60682327,411855823.34295034,405237411.4607855,394163717.5519665,386679364.68075526,377966130.3405804,367807913.8868181,358679742.8390722,351077578.4380737,343846647.86018974,335117349.9749667,324611812.59379905,313852483.05521905,304397105.0332289,295158165.34898096,287340043.4862482,279150732.6627244,270610026.8046926,261762437.1959361,252450332.50843102,243522712.08226871,237712538.64178517,233936207.8850532,232308570.88112125,229237470.6325062,224716862.86732915,219418586.38177705,213074006.51094365,206872707.69261044,201676281.3462093,197938337.66471085,194338672.6781239,190376832.14539355,186047360.36854127,183226622.6270624,181757767.9734328,179987472.780592,183343044.4348322,186786556.21925268,186786556.21925268,185339291.05656695,185339291.05656695,187079888.4417259,188885241.07732254,191727592.12250513,196651456.6139717,200127900.122707,203420816.83722278,204649472.19177508,205828321.751358,203817727.47150594,203817727.47150594,203817727.47150594,205890941.67541358,208675253.74913028,212721085.57391855,217424464.9117412,223996204.67902732,230341694.183192,236440817.46150988,242043203.55106607,246859509.55528197,252074837.9740222,255043732.63306677,257821566.86770257,260901507.60922363,262426528.17825103,262426528.17825103,262426528.17825103,262426528.17825103,260287897.2849738,260287897.2849738,263078381.71227366,267336658.092103,270813374.56856173,276212982.1650203,283289093.1116186,288446411.2514248,294483148.13897413,300797106.42514586,310059766.49480355,322986303.6606128,338858024.51037097,357149535.8862496,378887375.95798844,394182810.50453866,406806859.47727,417518133.3643946,428961628.4049025,436049023.59401757,433799165.46155804,431270249.6664566,424519432.63799316,419357505.7390049,419357505.7390049,419357505.7390049,419357505.7390049,419357505.7390049,419357505.7390049,419357505.7390049,415351273.36632735,410278789.53257054,402638873.7462977,395345189.57023364,389436292.5208137,380647508.67653644,374753372.89923483,370963330.48127055,368385190.0420675,368385190.0420675,365989145.460637,365989145.460637,365989145.460637,363934371.32480556,363934371.32480556,366048859.7501059,369661794.471951,369661794.471951,369661794.471951,373788922.49931806,375781624.1570886,375781624.1570886,375781624.1570886,367622938.22686887,360267064.1792883,354162375.18371004,350682857.6531426,345817129.54513454,341285375.3475571,337657365.46034306,337657365.46034306,342559311.2783627,342559311.2783627,339569976.43234605,336295880.80014783,336295880.80014783,336295880.80014783,338768739.99355894,338768739.99355894,338768739.99355894,338768739.99355894,338768739.99355894,338768739.99355894,342044397.7825555,350864491.1478471,362704930.7664436,375036584.6982377,394023786.78590125,413890083.17047477,434540563.6193233,449538898.4004915,465270924.7019154,481457487.25091314,497298210.19027585,514684511.4264109,529360365.6158738,538602322.2858517,538602322.2858517,535619612.5920952,539813731.8867776,545910655.3772737,552494626.9717448,561304600.1510336,565983533.2895774,565983533.2895774,561533758.7216092,553817127.5180955,547067657.6003121,537862242.002079,525299302.94214016,514416692.47039264,501452667.65358263,492994786.4842046,485484056.4807359,479436725.51203126,473262779.6341979,466447778.2707835,466447778.2707835,466447778.2707835,466447778.2707835,466447778.2707835,466447778.2707835,462211292.18640107,456621128.937593,453852591.6146001,451117019.22992474,446055559.84192973,438775697.216511,431409519.94130635,423824348.46040225,417177878.13284844,413041293.23492837,407159807.6895334,401268631.4653289,393561011.317497,386041554.78354895,377153543.92401385,369225571.93215895,362666673.4245387,355040782.2923638,348666874.9710139,343281839.8315396,337561455.55073255,332252966.3375168,332252966.3375168,334936627.6118924,334936627.6118924,331920247.41069585,331920247.41069585,331920247.41069585,329468676.4468472,329468676.4468472,329468676.4468472,329468676.4468472,327367478.6928739,327367478.6928739,327367478.6928739,329412030.01722884,331778878.054026,339395209.3192632,342772778.26889896,347912065.7828308,355133326.93315864,368127634.34223473,376712598.0702385,376712598.0702385,376712598.0702385,381712122.95073426,387651323.70168483,393077310.60989517,398888635.93934554,402219537.56198967,404951051.7107349,409326770.90760976,411956379.0307393,416565690.31356335,424676233.5815042,436033566.0087828,451114664.5016775,466693063.7400949,478860925.5469449,487408015.4094969,495843423.9393447,498997768.6333191,498997768.6333191,493317765.0379505,490366459.2212585,486507234.2730328,478970227.63303745,468849660.5172227,459448526.82956177,444905155.5046284,430109520.72799003,415020444.7175878,398669312.4127629,380259616.37268525,364633590.3617599,351862116.2649494,341106291.9060804,332257110.5147968,324179446.61664623,316834056.6051881,309291134.97271174,303194421.8764992,298268644.7957291,293975966.91380554,290633470.2085412,286198547.803171,281635048.7335203,276902064.0314717,272556357.14513105,267128957.37529206,263084807.33382767,258806770.78605166,254242266.7167724,248993571.22727883,244455263.6783529,242653885.684467,242653885.684467,241145035.36404154,238644297.45575085,235065108.03621036,231326373.75163427,227228210.03406614,222110135.7512719,216867426.07811323,212587550.74985567,208860391.2031037,204916524.39850432,200314590.10378858,196158630.73071927,193084204.85862866,190721097.23614386,188116876.37380606,185553818.55154678,183204518.2566574,182129492.6426756,182129492.6426756,182129492.6426756,181173164.77055934,179941080.7757404,178110937.78796646,176435866.68819374,175403787.5989731,175403787.5989731,175403787.5989731,174229130.6663713,173036441.8770338,171827875.8293807,170377591.3898019,168617838.28842518,167171395.5097653,165446262.67386037,163936468.4212191,163936468.4212191,163936468.4212191,168697302.26261678,176280402.99077228,188607729.8114907,198442952.7857136,200257966.59078074,198906571.4547646,195604974.5161532,192261587.97155052,190250918.2000891,190250918.2000891,188713390.74477172,186671320.07061023,185707466.56089848,185707466.56089848,185707466.56089848,187631070.5587564,189065258.80377308,189065258.80377308,189065258.80377308,189065258.80377308,189065258.80377308,189065258.80377308,189065258.80377308,189065258.80377308,188070929.4083333,186327397.133128,184265299.23281592,181955216.95203424,180187765.13202283]

// Keys are index of supplyHistory
// Values are CPI extracted manually from Ampleforth's oracle https://etherscan.io/address/0x63A257439D423732F883cfd1d62c94f4EaD7E947
// For example, look at the "payload" data in the transaction event log https://etherscan.io/tx/0x0428371be3fd31d52e2c4db04f076224dc756bf5612e139528b28643103fe59a#eventlog
const cpiHistory = {}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

let cpi = cpiHistory[0]
let allTimeHigh = 1 // maximum oracle rate
let allTimeLow = 1 // minimum oracle rate
// Flow through time
for (let t = 0; t < supplyHistory.length; t++) {
  const currSupply = supplyHistory[t]
  const prevSupply = supplyHistory[t - 1]

  // Maybe update cpi
  // Maybe update priceTarget
  if (t in cpiHistory) {
    cpi = cpiHistory[t]
  }
  const priceTarget = cpi / cpiHistory[0]

  const diffSupply = (currSupply - prevSupply) / currSupply
  oracleRate = priceTarget + 10 * diffSupply
  if (oracleRate > allTimeHigh) {
    allTimeHigh = oracleRate
  }
  if (oracleRate < allTimeLow) {
    allTimeLow = oracleRate
  }
}
console.log(allTimeHigh, allTimeLow)

// Color logo background based on
// positive or negative rebase: green or red
// percentage difference from all time market rate: alpha
function colorLogo(marketRateAtRebase, targetRateAtRebase) {
  const diffRateAtRebase = marketRateAtRebase - targetRateAtRebase

  let hue
  let allTimeRate
  if (diffRateAtRebase >= 0) {
    // green
    hue = 120
    allTimeRate = allTimeHigh
  } else {
    // red
    hue = 0
    allTimeRate = allTimeLow
  }
  //let alpha = diffRateAtRebase / (allTimeRate - targetRateAtRebase) // Hard, 100% when marketRateAtRebase is allTimeRate
  let alpha = (diffRateAtRebase / (allTimeRate - targetRateAtRebase)) / 3 // Soft, 33% when marketRateAtRebase is allTimeRate

  let color = `hsla(${hue}, 100%, 50%, ${alpha})`
  console.log(diffRateAtRebase, color)
  document.getElementById("header_logo").style.backgroundColor = color
}

let restartRunFlag = false // Global variable
async function restartRun() {
  if (restartRunFlag) {
    return // Another restartRun() is already executing, do not execute this restartRun()
  } else {
    restartRunFlag = true
    await sleep(100) // Let old run stop before starting new run
    restartRunFlag = false
    run()
  }
}

let pauseRunFlag = false // Global variable
async function pauseRun() {
  pauseRunFlag = !pauseRunFlag
}

document.getElementById("time_start").addEventListener("input", restartRun)

document.getElementById("time_end").addEventListener("input", restartRun)

async function run() {
  const maxSupply = Math.max(...supplyHistory)
  let cpi = cpiHistory[0]

  // Price slider colors logo based on priceTarget at current time
  let priceTarget
  document.getElementById("oracle_rate").addEventListener("input", e => {
    colorLogo(document.getElementById("oracle_rate_output").value, priceTarget)
  })

  while (true) { // Loop forever
    const timeStart = document.getElementById("time_start").value
    const timeEnd = document.getElementById("time_end").value
    const sleepValue = document.getElementById("sleep").value
    // Make sure a loop always sleeps
    if (timeStart === timeEnd) {
      await sleep(sleepValue)
    }

    // Flow through time
    for (let t = timeStart; t < timeEnd; t++) {
      if (restartRunFlag) {
        return
      }
      if (pauseRunFlag) {
        while (pauseRunFlag) {
          if (restartRunFlag) {
            return
          }
          await sleep(sleepValue)
        }
      }

      const currSupply = supplyHistory[t]
      const prevSupply = supplyHistory[t - 1]

      // Maybe update cpi
      // Maybe update priceTarget
      if (t in cpiHistory) {
        cpi = cpiHistory[t]
      }
      priceTarget = cpi / cpiHistory[0]

      const diffSupply = (currSupply - prevSupply) / currSupply
      oracleRate = priceTarget + 10 * diffSupply
      console.log(oracleRate, priceTarget)
      colorLogo(oracleRate, priceTarget)

      const fontSize = currSupply * 100 / maxSupply + "vmin"
      console.log(fontSize)
      document.getElementById("header_logo").style.fontSize = fontSize
      await sleep(sleepValue)
    }
  }
}

run()
